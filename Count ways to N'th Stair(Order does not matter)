/* MEMOISATION */
class Solution {
    public int nthStair(int n){
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        return solve(n, dp);
    }
    
    public static int solve(int i, int dp[]){
        if(i==0) return 1;
        if(i<0) return 0;
        if(dp[i]!=-1) return dp[i];
        int jump1=solve(i-1, dp);
        int jump2=solve(i-2, dp);
        return dp[i]= 1+ Math.min(jump1,jump2);
    }
}

/*
LOGIC---
By travelling from bottom to top, we are gettign unique combos
*/

/* RECURSION TLE */
class Solution {
    public int nthStair(int n){
        HashSet<ArrayList<Integer>> set = new HashSet<>();
        solve(n, 0, new ArrayList<Integer>(), set);
        return set.size();
    }
    
    public static void solve(int n, int i, ArrayList<Integer> list, HashSet<ArrayList<Integer>> set){
        if(i==n){
            ArrayList<Integer> temp = new ArrayList<>(list);
            Collections.sort(temp);
            if(!set.contains(temp)) set.add(temp);
            return;
        }
        if(i>n) return;
        list.add(1);
        solve(n, i+1, list, set);
        list.remove(list.size()-1);
        list.add(2);
        solve(n,i+2, list, set);
        list.remove(list.size()-1);
    }
}

/*
Note---
Ordering of ways does not matter. So, use hashset
*/

/* TABULATION */
class Solution {
    public int nthStair(int n) {
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        dp[0]=1;
        dp[1]=1;
        for(int i=2; i<=n; i++){
            dp[i] = 1 + Math.min(dp[i-1], dp[i-2]);
        }
        return dp[n];
    }
}

/*
LOGIC---
the logic used in the for loop is based on finding the minimum steps to reach the nth stair, 
rather than counting all unique combinations of steps where the order doesn't matter.
*/

/* MAGIC SOLUTION ONE LINER */
class Solution {
    public int nthStair(int n) {
        return n/2 +1;
    }
}

/*
LOGIC---
if we fix the number of steps of size 1 then a combination is possible only if the remaining length of stairs is even. 
So, we just need to find the number of even numbers between 0 and m which turn out to be m/2+1.
*/
