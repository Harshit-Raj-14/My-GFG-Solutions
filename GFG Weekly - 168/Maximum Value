PS- Maximum Value (GFG contest 168)
The score of the array is defined as the minimum element in the array. Your goal is to maximize the score of the array.
You are allowed to perform the following operation any number of times:
â€¢ Choose any element from arr[i]. => Subtract k from arr[i] => Add 1 to any element in the array

Return the maximum score of the array you can achieve. In one operation you have to perform all three steps.
Input: n = 3, k = 2, arr = [1,0,3]
Output: 1
Explanation: Performing the operation once, removing 2 from third index and adding 1 to the second index, the array becomes [1,1,1]. 
The minimum value of the array is 1. We can see this is the maximum score of the array.

/* BINARY SEARCH ON ANSWER */
class Solution {
    public static int maxValueArray(int n, int k, int[] arr) {
        long l = 0;
        long r = 1000000000;    //see contriants of array values
        long ans = -1;  
        while (l <= r) {
            long mid = (l+r)/2;
            if (binary(arr, k, mid)) {
                ans = mid;  
                l = mid + 1;
            } 
            else r = mid - 1;
        }
        return (int)ans;
    }

    public static boolean binary(int[] arr, int k, long mid) {
        long powerofadding1 = 0;
        long  requiredpowerof1 = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > mid) powerofadding1 += (arr[i] - mid) / k;
            else  requiredpowerof1 += (mid - arr[i]);
        }
        if(powerofadding1 - requiredpowerof1 >= 0) return true;
        else return false;
    }
}

/*
LOGIC---
Maximise the minimum score(~element) of array => possiblity of binary search
Applying operations will be easier if we have sorted array => binary search confirmed

Our ans will only exist from the minimum to maximum elemnt of array.

We will get : YYYYYYYNNNNNNN
So, we need last Y.

So, if mid is our possible final maximised minimum value of array.
Subtracting k from an element gives us the power of adding 1 to any element.
But since mid is our minimum element in array. We wouldn't want the element from whwich we are subtracting k go lower than mid.

So, powerofadding1 = (arr[i]-mid)/k;

Now we ened to check whether powerofadding1 is enough to bring all element to mid, in case some are still les than mid.
So, requiredpowerof1 = mid-arr[i];

Now if requiredpowerof1-powerofadding1>=0 => we say its possible to get mid as the minimum of our array.
TC - O(nlogn) => inside binary search iterating array each time
*/