class Solution {
    public static long cntGood(String s){
        int n=s.length();
        int freq0[] = new int[s.length()];
        for(int i=0;i<n;i++){
            if(s.charAt(i)=='0') freq0[i]++;
        }
        //prefix sum of frequency of 0
        for(int i=1;i<n;i++) freq0[i]=freq0[i]+freq0[i-1];
        long odd=0; // numbe rof good substrings
        for(int i=n-1;i>=0;i--){
            if((s.charAt(i)-'0')%2!=0){ //end character is odd
                odd+=(i+1)-freq0[i];
            }
        }
        return odd;
    }
}

/*
LOGIC---
We ened substrings that are odd when turned into a number.
We don't want leading zeroes in our substring.
A number is odd when the last number is not even.

So, no of substrings from index i, i+1, i+3,  up to j is = j-i+1

So, we start iterating from back and if the number is odd, it becoems our jth index.

Now if value of one of i th indexes are 0 it won't contribute as good substring.
So, we maintain a freq of 0 as a prefix sum up till that index.

So, we subtract the good substrings that could have been - frequency of 0 till that index.

Also to get maximum substrings from j we need our i to start from 0 
=> no of good substring = j-(0)+1 - freq of 0 that won't contribute to our good substring uptill j
*/
