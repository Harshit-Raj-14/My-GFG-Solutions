class Solution {
    public static long getMax(int n, int m, int arr[][]) {
        //Step I: prepare area dp
        long dp[][] = new long[n][m];
        dp[0][0] = arr[0][0];
        for(int i=1;i<n;i++) dp[i][0]=dp[i-1][0] + arr[i][0];  //precalculating area for first row
        for(int j=1;j<m;j++) dp[0][j]=dp[0][j-1] + arr[0][j];  //precalculating area for first column
        //calculate now the remaining inside of the array
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                dp[i][j] = arr[i][j] + dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1];
            }
        }
        //Step II: compute sub matrixes for each possibility of removing ith row and jth column
        long ans=0;
        for(int i=1;i<=n-2;i++){
            for(int j=1;j<=m-2;j++){ //we already discussed as observation why bad idea to remove boundaries, just lazy to start from there to avoid writing boundary conditions
                long top_left = dp[i-1][j-1];
                long top_right = dp[i-1][m-1] - dp[i-1][j];
                long bottom_left = dp[n-1][j-1] - dp[i][j-1];
                long bottom_right = dp[n-1][m-1] - (dp[i][m-1] + dp[n-1][j]) + dp[i][j];
                long curr_sum = top_left*bottom_right + top_right*bottom_left;
                ans=Math.max(ans, curr_sum);
            }
        }
        return ans;
    }
}


/*
LOGIC---
For finding maximum for any problem we have 3 approach -> greedy, binary search, recursion

Here, we will use recursion (dp):

Objective: maximise : sum(tl)*sum(br) + sum(bl)*sum(tr)

Observation : 
=> deleting any boundary row or column will make any two submatrix 0 => making our expression 0


This a DP on matrices problem => where we precompute sum of each rectangle

dp(i,j) -> represents sum of cell values in a rectangle from diagonal starting (0,0) to (i,j)
So, dp[i][j] will be equivalent to:
dp[i][j] = arr[i][j] + dp[i][j-1] + dp[i-1][j] - dp[i-1][j-1];
Try to imagine and draw the rectangles you will get this expression. => think of these dp's as areas of rectangle
Think of dp[i][j] a bigger rectangle,
arr[i][j] is the cornermost elemnt to be added.
dp[i][j-1] is the rectangle left of arr[i][j] but does not contain column j
dp[i-1][j] is the rectangle above of arr[i][j] but does not contain column i
dp[i-1][j-1] is the rectangle that needs to be subtracted since it is added twice because of the above two rectagle area

Step I: do the above calculation for all i to j for dp[i][j]

Step II:
So, now let's say we are going to eliminate row i and column j
So, we get four sub matrices whose areas will be: matrix arr =>(n,m)

top-left = dp[i-1][j-1] 
top-right = dp[i-1][m-1] - dp[i-1][j]
bottom-left = dp[n-1][j-1] - dp[i][j-1]
bottom right = dp[n-1][m-1] - (dp[i][m-1] + dp[n-1][j]) + dp[i][j]

Just imagine the all above as areas region in a rectnagle and you will get it.

TC - O(n*m)
SC - O(n*m) => you cna make this O(1) by using the given arr itself
*/