class Solution {
    public static long fndMax(int n, int m, int[] arr1, int[] arr2) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        int l1=0, r1=n-1;
        int l2=0, r2=m-1;
        long ans=0;
        while(l1<=r1 && l2<=r2){
            if(Math.abs(arr1[l1]-arr2[r2])>=Math.abs(arr1[r1]-arr2[l2])){
                ans+=Math.abs(arr1[l1]-arr2[r2]);
                l1++;
                r2--;
            }
            else{
                ans+=Math.abs(arr1[r1]-arr2[l2]);
                r1--;
                l2++;
                
            }
        }
        return ans;
    }
}

/*
LOGIC---
Max difference will only come when we subtract maximum wiht some minimum value.
Sorting can help us to get max difference.

Sorted arrays are:
arr1=A1,A2,A3,A4
arr2=B1,B2,B3,B4,B5,B6

Case I: Taking n elements from last part of arr2
=>subtracting while moving forward in arr1 and backward in arr2
max_dif= B6-A1 + B5-A2 + B4-A3 + B3-A4 

CaseII: Taking n elements from the front part of arr2 [can be when A1>B6 or soemthing like that at some threshold]
=>subtracting while moving forward in arr1 and arr2
max_dif= B1-A1 + B2-A2 + B3-A3 + B4-A4

CaseIII: 
=> Taking (first element from front of arr1 - last element of arr2) + (n-1 elements from back of arr1 - n-1 elements from front of arr2)
=> Taking (first two element from front of arr1 - last two element of arr2) + (n-2 elements from back of arr1 - n-2 elements from front of arr2)
=> Taking (first i element from front of arr1 - last i element of arr2) + (n-i elements from back of arr1 - n-i elements from front of arr2) and so on.....

=>And in fact Case III: is a very general case
 
Now how we can achieve doing case III in O(n) using two pointer
where we check at each position which first nad last combination is fruitful
*/