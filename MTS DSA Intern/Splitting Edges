PS-
You have been given an undirected tree with N nodes and N-1 edges, each node has a value Values; either 1, 2, or 3. 
When you cut an edge, the tree gets split into two components and this splitting is valid if both components satisfy the below property.
â€¢ Property: Let X be the product of all the node values in the component then, X should be divisible by 6.

In simple words, you are given an array Values which contains the value of each node and an Edges array which contains N - 1 undirected edges of the tree. 
Find the number of valid splits of the given tree i.e. number of edges that can be removed such that components formed after splitting follows the above given property.

NOTE: You need to split the tree into two components only i.e. only one edge removal is possible at once.

Example 1:
Input:
N = 5
Values[] = {3,2,2,3,1}
Edges = {{0,1},{0,2},{1,3},{1,4}}
Output:
1
Explanation: 
Geek can split the tree at edge {0,1} and the resulting components will have product divisible by 6.


Example 2:
Input:
N = 7
Values[] = {3,2,2,3,3,3,2)
Edges[] = {{0,1},{0,2},{1,3},{1,4},{4,6},{2,5}}
Output:
3
Explanation:
Geek can split the tree at edge {0,1} and the resulting two components will have product divisible by 6.
Similarly, Geek can also split the tree at edge {1,4} and the resulting two components will have product divisible by 6.
Similarly, Geek can also split the tree at edge (0,2) and the resulting two components will have product divisible by 6.


/* CODE */
class Solution {
    private static int cnt2;
    private static int cnt3;
    private static List<List<Integer>> tree;
    private static int ans = 0;

    public static int splittingEdges(int n, int[] vals, int[][] Edges) {
        tree = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            tree.add(new ArrayList<>());
        }

        for (int[] edge : Edges) {
            tree.get(edge[0]).add(edge[1]);
            tree.get(edge[1]).add(edge[0]);
        }

        cnt2 = 0;
        cnt3 = 0;
        for (int value : vals) {
            if (value == 2) cnt2++;
            if (value == 3) cnt3++;
        }

        ans = 0;
        dfs(0, -1, vals);

        return ans;
    }

    private static int[] dfs(int node, int parent, int[] vals) {
        int[] hello = new int[2]; 
        if (vals[node] == 2) hello[0]++;
        if (vals[node] == 3) hello[1]++;
        for (int neighbor : tree.get(node)) {
            if (neighbor == parent) continue;
            int[] childCounts = dfs(neighbor, node, vals);

            hello[0] += childCounts[0];
            hello[1] += childCounts[1];

            if (isValidSplit(childCounts[0], childCounts[1], cnt2 - childCounts[0], cnt3 - childCounts[1])) {
                ans++;
            }
        }

        return hello;
    }

    private static boolean isValidSplit(int subtreeTwos, int subtreeThrees, int complementTwos, int complementThrees) {

        return (subtreeTwos > 0 && subtreeThrees > 0) && (complementTwos > 0 && complementThrees > 0);
    }
}    